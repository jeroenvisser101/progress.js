{"version":3,"file":"progress.min.js","sources":["../../src/js/progress.js"],"names":["document","Progress","target","options","InvalidArgumentException","this","nsURI","svg","indicator","settings","defaults","size","stroke_width","reverse","background","drawSVGCircle","appendChild","prototype","createElementNS","style","width","height","setAttribute","drawSVGPath","set","name","svg_path","half_size","radius","path","strokeWidth","percentage","animate","that","setTimeout","offset","total_length","getTotalLength","percentage_float","strokeDasharray","strokeDashoffset","message","toString","obj","i","length","arguments","source","prop","hasOwnProperty","window"],"mappings":"CAAA,SAAWA,GACP,YASA,IAAIC,GAAW,SAAUC,EAAQC,GAE7B,IAAKD,EACD,KAAM,IAAIE,GAAyB,iDAIhB,iBAAZD,KACPA,MAIJE,KAAKC,MAAQ,6BACbD,KAAKE,IAAM,KACXF,KAAKG,UAAY,KAGjBH,KAAKH,OAASA,EACdG,KAAKI,YACLJ,KAAKK,UAEDC,KAAM,IAGNC,aAAc,EAGdC,SAAS,EAGTC,YAAY,GAKhBT,KAAKI,SAAWC,EAASP,EAASE,KAAKK,UAGvCL,KAAKU,gBAGLV,KAAKH,OAAOc,YAAYX,KAAKE,KAMjCN,GAASgB,UAAUF,cAAgB,WAE/BV,KAAKE,IAAMP,EAASkB,gBAAgBb,KAAKC,MAAO,OAChDD,KAAKE,IAAIY,MAAMC,MAAQf,KAAKE,IAAIY,MAAME,OAAShB,KAAKI,SAASE,KAAO,KACpEN,KAAKE,IAAIe,aAAa,QAAS,eAG3BjB,KAAKI,SAASK,YACdT,KAAKE,IAAIS,YAAYX,KAAKkB,YAAY,eAE1ClB,KAAKE,IAAIS,YAAYX,KAAKG,UAAYH,KAAKkB,YAAY,cAGvDlB,KAAKmB,IAAI,GAAG,IAShBvB,EAASgB,UAAUM,YAAc,SAAUE,GACvC,GAAIC,GACAd,EAAeP,KAAKI,SAASG,aAC7Be,EAAYtB,KAAKI,SAASE,KAAO,EACjCiB,EAASD,EAAYf,EAAe,EACpCiB,EACI,KAAOF,EAAY,KAAOf,EAAe,EACzC,KAAOgB,EAAS,IAAMA,EAAS,YAAwB,EAATA,EAC9C,KAAOA,EAAS,IAAMA,EAAS,YAAwB,GAATA,CAUtD,OAPAF,GAAW1B,EAASkB,gBAAgBb,KAAKC,MAAO,QAChDoB,EAASJ,aAAa,IAAKO,GAC3BH,EAASP,MAAMW,YAAclB,EAC7Bc,EAASJ,aAAa,QAASG,GAE/BpB,KAAKE,IAAIS,YAAYU,GAEdA,GASXzB,EAASgB,UAAUO,IAAM,SAAUO,EAAYC,GAQ3C,GANuB,mBAAZA,KACPA,GAAU,GAKVA,EAAS,CACT,GAAIC,GAAO5B,IACX,OAAO6B,YAAW,WACdD,EAAKT,IAAIO,GAAY,IACtB,GAIP,GAAiB,EAAbA,GAAkBA,EAAa,IAC/B,KAAM,IAAI3B,GAAyB,0CAGvC,IACI+B,GADAC,EAAe/B,KAAKG,UAAU6B,iBAE9BC,EAAmBP,EAAa,GAIhCI,GADA9B,KAAKI,SAASI,QACLuB,EAAeE,EAEfF,IAAiB,EAAIE,GAIlCjC,KAAKG,UAAUW,MAAMoB,iBAAmBH,EAAcA,GACtD/B,KAAKG,UAAUW,MAAMqB,iBAAmBL,EAS5C,IAAI/B,GAA2B,SAAUqC,GACrCpC,KAAKoC,QAAUA,EACfpC,KAAKoB,KAAO,2BACZpB,KAAKqC,SAAW,WACZ,MAAOrC,MAAKoB,KAAO,KAAOpB,KAAKoC,UAWnC/B,EAAW,SAAUiC,GACrB,IAAK,GAAIC,GAAI,EAAGC,EAASC,UAAUD,OAAYA,EAAJD,EAAYA,IAAK,CACxD,GAAIG,GAASD,UAAUF,EACvB,KAAK,GAAII,KAAQD,GACTA,EAAOE,eAAeD,IACG,mBAAdL,GAAIK,KACXL,EAAIK,GAAQD,EAAOC,IAKnC,MAAOL,GAIXO,QAAOjD,SAAWA,GACnBD","sourcesContent":["(function (document) {\n    'use strict';\n\n    /**\n     * Progress.js\n     *\n     * @param {HTMLElement} target  The target element which will hold the indicator.\n     * @param {Object}      options Object containing options\n     * @constructor\n     */\n    var Progress = function (target, options) {\n        // Make sure the target is defined\n        if (!target) {\n            throw new InvalidArgumentException('Target must be set in order to use this class.');\n        }\n\n        // Make sure options given is an object\n        if (typeof options !== 'object') {\n            options = {};\n        }\n\n        // SVG related variables\n        this.nsURI = 'http://www.w3.org/2000/svg';\n        this.svg = null;\n        this.indicator = null;\n\n        // Some instance variables\n        this.target = target;\n        this.settings = {};\n        this.defaults = {\n            // The diameter of the circle\n            size: 100,\n\n            // The width of the stroke\n            stroke_width: 8,\n\n            // If it counts down, the display will change (reversed)\n            reverse: false,\n\n            // If there is a background, we'll make 2 circles, and add .background class to it.\n            background: true\n        };\n\n\n        // Default settings\n        this.settings = defaults(options, this.defaults);\n\n        // Draw the circle\n        this.drawSVGCircle();\n\n        // Add it to the target\n        this.target.appendChild(this.svg);\n    };\n\n    /**\n     * Draws the circle and it's background in `this.svg`.\n     */\n    Progress.prototype.drawSVGCircle = function () {\n        // Create the SVG object, set the size, add a class\n        this.svg = document.createElementNS(this.nsURI, 'svg');\n        this.svg.style.width = this.svg.style.height = this.settings.size + 'px';\n        this.svg.setAttribute('class', 'progress-js');\n\n        // Create 2 circles, background and the indicator\n        if (this.settings.background) {\n            this.svg.appendChild(this.drawSVGPath('background'));\n        }\n        this.svg.appendChild(this.indicator = this.drawSVGPath('indicator'));\n\n        // Set the start value to 0 percent (to make the start animation work)\n        this.set(0, false);\n    };\n\n    /**\n     * Draws a circle path inside the svg.\n     *\n     * @param {string} name The name of the path (used in the class)\n     * @returns {Element}\n     */\n    Progress.prototype.drawSVGPath = function (name) {\n        var svg_path,\n            stroke_width = this.settings.stroke_width,\n            half_size = this.settings.size / 2,\n            radius = half_size - stroke_width / 2,\n            path =\n                'M ' + half_size + ', ' + stroke_width / 2 +\n                'a ' + radius + ',' + radius + ' 0 0,0 0,' + (radius * 2) +\n                'a ' + radius + ',' + radius + ' 0 0,0 0,' + (radius * -2);\n\n        // Create the indicator\n        svg_path = document.createElementNS(this.nsURI, 'path');\n        svg_path.setAttribute('d', path);\n        svg_path.style.strokeWidth = stroke_width;\n        svg_path.setAttribute('class', name);\n\n        this.svg.appendChild(svg_path);\n\n        return svg_path;\n    };\n\n    /**\n     * Sets the value of the indicator.\n     *\n     * @param {int} percentage\n     * @param {boolean} [animate] Defaults to true\n     */\n    Progress.prototype.set = function (percentage, animate/* = true */) {\n        // Default animate to true\n        if (typeof animate === 'undefined') {\n            animate = true;\n        }\n\n        // If we need to animate this, we delay execution of this function with 1ms\n        // otherwise the transitions won't be used.\n        if (animate) {\n            var that = this;\n            return setTimeout(function () {\n                that.set(percentage, false);\n            }, 1);\n        }\n\n        // Check if the percentage given is valid\n        if (percentage < 0 || percentage > 100) {\n            throw new InvalidArgumentException('Percentage should be between 0 and 100.');\n        }\n\n        var total_length = this.indicator.getTotalLength(),\n            offset,\n            percentage_float = percentage / 100;\n\n        // If we count down, the offset will be calculated differently\n        if (this.settings.reverse) {\n            offset = total_length * percentage_float;\n        } else {\n            offset = total_length * -(1 - percentage_float);\n        }\n\n        // Apply the styles\n        this.indicator.style.strokeDasharray = [total_length, total_length];\n        this.indicator.style.strokeDashoffset = offset;\n    };\n\n    /**\n     * Exception to indicate that given arguments are invalid.\n     *\n     * @param {string} message Error message to be shown.\n     * @constructor\n     */\n    var InvalidArgumentException = function (message) {\n        this.message = message;\n        this.name = 'InvalidArgumentException';\n        this.toString = function () {\n            return this.name + ': ' + this.message;\n        };\n    };\n\n    /**\n     * Sets default values on an object. Heavily inspired by Underscore.js\n     *\n     * @param {Object} obj\n     * @returns {Object}\n     * @source {http://underscorejs.org/#defaults}\n     */\n    var defaults = function (obj) {\n        for (var i = 1, length = arguments.length; i < length; i++) {\n            var source = arguments[i];\n            for (var prop in source) {\n                if (source.hasOwnProperty(prop)) {\n                    if (typeof obj[prop] === 'undefined') {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        return obj;\n    };\n\n    // Export it to window:\n    window.Progress = Progress;\n})(document);\n"]}